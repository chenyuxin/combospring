package com.github.chenyuxin.commonframework.test.cipher;

import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;

import org.junit.jupiter.api.Test;

import com.github.chenyuxin.commonframework.base.converter.ByteConverter;
import com.github.chenyuxin.commonframework.base.converter.HexUtil;


public class TestAsymmetricKey {
	

	public static final String publicHexKey = "30819F300D06092A864886F70D010101050003818D0030818902818100AC3A9740D3C44FCAC06C6C90C22C9D32824897D32420EDA929427146EE39E554985896CA1E55F9E1476B0A917B2F94BA84444C0F8CC5A741F5302BF36CCD99508CA033B119AFB755773DFD5AB5EB01AD374386F57EFC7E777A8076130575824C17A9A488D0AB1A3843A721112675D2F774CD7B473A786903577039F3D7E4EF7B0203010001";
	public static final String privateHexKey = "30820277020100300D06092A864886F70D0101010500048202613082025D02010002818100AC3A9740D3C44FCAC06C6C90C22C9D32824897D32420EDA929427146EE39E554985896CA1E55F9E1476B0A917B2F94BA84444C0F8CC5A741F5302BF36CCD99508CA033B119AFB755773DFD5AB5EB01AD374386F57EFC7E777A8076130575824C17A9A488D0AB1A3843A721112675D2F774CD7B473A786903577039F3D7E4EF7B020301000102818038257DABA79DC6F96D13ABACE17053EAE4682FFEA83787E2EECD774A4D5D5872E49B74C4FD70BFDE7E3EDA1A255394A3DD7CBA63135C58337B7031D3D0B391F81465EDBCDFB7351A33AF05EE1AA19120DE9C392DBEBA7704CEFA0D79439BF4A7F28B704F96AB7BFBAF78BC1102AEA300C9466BA40E8F31B2411D2C9CF08DEE51024100DB6E530D7A97497CE4426A9B16AB32B84DA1FD35B339323B9D96F69600B0D40D0201DD2D53194F812A87954E5348FA4F1D9B2C058E04C248C87C1E92F8281863024100C8EE76C4447F36F66994DAB6513066F5340D2A34128D211526015964A24286D37B5E26570EAC593DDB4D4CB091284BFE49238F7CCA9EB65922203D9F498DDC0902402F34CDD341835880F0CE4506F65A803FDC1BB450A02CF6DC926B8EC2F8851229763C166C10CB8A2A1C8F2C94BC202011732A15CF601D2FFADE7EAD492AEFDD470241008EB5A7CF006366531F6C24E706C51CEB1CFC18B481549161A6EBA065344591E314A52B0FFC10F71552F414FAF72E2AC341892B3953E3E3D96CBE7F65E9E50299024100C337E776917F44A0C975A6A92736491D79C75AB81336993D8C0198B3E609B7FEE91C7E7FBDAEAD9783B059025ABDAA6E71950FA4077AD850CC4BCC26ADDADF79";
	public static final String DSAPublicHexKey = "308201B73082012C06072A8648CE3804013082011F02818100FD7F53811D75122952DF4A9C2EECE4E7F611B7523CEF4400C31E3F80B6512669455D402251FB593D8D58FABFC5F5BA30F6CB9B556CD7813B801D346FF26660B76B9950A5A49F9FE8047B1022C24FBBA9D7FEB7C61BF83B57E7C6A8A6150F04FB83F6D3C51EC3023554135A169132F675F3AE2B61D72AEFF22203199DD14801C70215009760508F15230BCCB292B982A2EB840BF0581CF502818100F7E1A085D69B3DDECBBCAB5C36B857B97994AFBBFA3AEA82F9574C0B3D0782675159578EBAD4594FE67107108180B449167123E84C281613B7CF09328CC8A6E13C167A8B547C8D28E0A3AE1E2BB3A675916EA37F0BFA213562F1FB627A01243BCCA4F1BEA8519089A883DFE15AE59F06928B665E807B552564014C3BFECF492A0381840002818029F95F001830BF2332D892FB1E3C7B0FD432B5AAE0B1E853F832951D1D2F2F317577F6EDCF739130DF8B43DD5C5FD20A09886AA739E9106D3F4E748D66597F8D50F3C1C1AE967A2195F2E4B21656F0603493F7B8C2FA25E5FE5F35219A5CD9D4D35F752D9A1B69D485214C561BED461C492152AFF231D7329ADBC54F627A2BF3";
	public static final String DSAPrivateHexKey = "3082014C0201003082012C06072A8648CE3804013082011F02818100FD7F53811D75122952DF4A9C2EECE4E7F611B7523CEF4400C31E3F80B6512669455D402251FB593D8D58FABFC5F5BA30F6CB9B556CD7813B801D346FF26660B76B9950A5A49F9FE8047B1022C24FBBA9D7FEB7C61BF83B57E7C6A8A6150F04FB83F6D3C51EC3023554135A169132F675F3AE2B61D72AEFF22203199DD14801C70215009760508F15230BCCB292B982A2EB840BF0581CF502818100F7E1A085D69B3DDECBBCAB5C36B857B97994AFBBFA3AEA82F9574C0B3D0782675159578EBAD4594FE67107108180B449167123E84C281613B7CF09328CC8A6E13C167A8B547C8D28E0A3AE1E2BB3A675916EA37F0BFA213562F1FB627A01243BCCA4F1BEA8519089A883DFE15AE59F06928B665E807B552564014C3BFECF492A04170215008FF22FCF5225EABCA70C591AADDB3BE928083D49";

	
	@Test
	public void test1() {
		try {
			KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
			keyPairGen.initialize(1024);
	        //通过对象 KeyPairGenerator 获取对象KeyPair
	        KeyPair keyPair = keyPairGen.generateKeyPair();
	        
	        //通过对象 KeyPair 获取RSA公私钥对象RSAPublicKey RSAPrivateKey
	        Key publicKey = keyPair.getPublic();
	        Key privateKey = keyPair.getPrivate();
	        
	        System.out.println(HexUtil.toHexString(publicKey.getEncoded()));
	        System.out.println(HexUtil.toHexString(privateKey.getEncoded()));
	        
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
       
	}
	
	@Test
	public void test2() {
		byte[] b0 = ByteConverter.HEX.escape(publicHexKey);
		String publicBase64Key = ByteConverter.BASE64.parse(b0);
		System.out.println(publicBase64Key);
		
		String publicBase64Key2 = ByteConverter.BASE64.getConverter(ByteConverter.HEX, publicHexKey);
		System.out.println(publicBase64Key2);
		
		byte[] b1 = ByteConverter.HEX.escape(privateHexKey);
		String privateBase64Key = ByteConverter.BASE64.parse(b1);
		System.out.println(privateBase64Key);
		
		ByteConverter.BASE64.getConverter(ByteConverter.HEX, publicHexKey);
	}
	
	

}
